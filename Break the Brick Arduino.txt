#include<stdio.h>            //standard input output
#include<stdlib.h>            //standard library
#include<math.h>            //math function
  static int pattern[64];        //finally converted to 1 D array
 static char ar[8][8];                  //8x8 field
 static int c[32];                    //governs vertical coordinate of all 6 bricks
 static int d[32];                    //governs horizontal coordinate of all 6 bricks
 static int m=3;                      //position of 1st bit of slider
 static int multi=0;
 static int Y=3;                      //instantaneous vertical coordinate starting from top
 static int X=7;                      //instantaneous horizontal coordinate starting from top
 static int y=2;                      //previous vertical coordinate starting from top
 static int x=6;                      //previous horizontal coordinate starting from top
 static int buzzer_count=0;
 int del = 0; // clk width
 int chk = 0; // check for reset signal
 int row[8]={4,5,6,7,8,9,12,13}; // row
 int ct = 0; //array counter
 int i,j,k,font=0;        //i,j,k for loops, 
 char ch;               //act as hidden characters
 int sensorPin = 3;
 int times;
static int lif=3;


 void setup() {
   Serial.begin(9600);
   Serial.println("Start"); 
   // initialize the digital pins as an output.
   pinMode(2, OUTPUT); //clk out
   pinMode(3, INPUT); // reset sense
   pinMode(A0,INPUT);
   pinMode(11,INPUT);
   pinMode(10,OUTPUT);
   digitalWrite(10,LOW);
pinMode(A1,OUTPUT);
   pinMode(A2,OUTPUT);
   pinMode(A3,OUTPUT);
   digitalWrite(A1, HIGH);  
   digitalWrite(A2, HIGH);  
   digitalWrite(A3, HIGH); 
   for (int i = 0; i <=7; i++){
     pinMode(row[i], OUTPUT); 
     digitalWrite(row[i], HIGH);  
   }
  for(i=0;i<=31;i++)
  {
    c[i]=i/8;               //setting up y coordinates
    d[i]=i%8;               //setting up x coordinates
  }

for(i=0;i<=63;i++)
  {      pattern[i]=0;         //pattern initialisation
 }

for(i=0;i<=31;i++)
  {
    ar[c[i]][d[i]]=2;           //brick character
  }
 reset();
 } // setup

 void loop() {
if(buzzer_count>1000) 
{
  buzzer_count=0;
   digitalWrite(10,LOW);  
}
     for(i=0;i<=7;i++)
    {
        for(j=0;j<=7;j++)
        {
          for(k=0;k<=31;k++)
          {
            if(i==c[k]&&j==d[k])
            font++;
          }
          if(font>0)
            {
    font=0;
                if(ar[i][j]==111)
                ar[i][j]=0;
            }                           //bricks must not get initialized to 0 hence do anything else
            else
            ar[i][j]=0;                   //initialize all elements to ' '
        }
    }

    if(multi>1000&&digitalRead(11)!=HIGH)
{
multi=0;
 ball();
  if(lif==2)    
        {
          digitalWrite(A1, LOW);
          digitalWrite(A2, HIGH);
          digitalWrite(A3, HIGH);
        }
        if(lif==1)    
        {
          digitalWrite(A1, LOW);
          digitalWrite(A2, LOW);
          digitalWrite(A3, HIGH);  
        }
        if(lif==0)  {  
          digitalWrite(A1, LOW);
          digitalWrite(A2, LOW);
          digitalWrite(A3, LOW); 
        }//locomotion of ball
}
slider();   
  for(i=0;i<=7;i++)
    {
        ar[7][i]=(i==m||i==m+1||i==m+2||i==m+3?220:0);  //slider row value is 0 if doesn't includes slider else 220
    }
    ar[Y][X]=111;                   //ball is 'o'

  int counter =0;
   
    for(i=0;i<=7;i++)
    {
        for(j=0;j<=7;j++)
        {
            if(ar[j][i]==0)
                pattern[counter]=0;
            else
                pattern[counter]=1;

            printf("%d",pattern[counter]);
                counter++;
        }
        printf("\n");               //with \n after termination of each row
    }

       

 

  
     for (j=0;j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delayMicroseconds(200);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         multi++;
         ct++;
     }
   }
 ct=0;
 }

 void pulse(){
       digitalWrite(2, HIGH); 
       delay(del);            
       digitalWrite(2, LOW);  
       delay(del);   
       // 8 pulses for 8 rows
 }

 void reset (){
   for (int i = 1; i<=9; i++){
     pulse();
     Serial.println(i);
     chk = digitalRead(sensorPin);
     Serial.println(chk);
     if (chk==1){   
       return;
     } // if
   } // for
 } // function
 void ball()
{
    int i,count=0;              //for loop
    int xtemp;                  //temporary variable for x
    int ytemp;                  //temporary variable for y
    int bricktemp;              //if any brick position matches with the ball then required
    xtemp=X;                    //after every loop X value transfers to xtemp
    ytemp=Y;                    //and Y to ytemp as we'll reuire x and y two steps ahead

  if(X==7){ X--;
                if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;} 
  }//if ball is at right wall rebound
    else if(X==0) {
                      if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}
      X++;          //if ball is at left wall rebound
    }
    else if((Y!=6)||(X!=m&&X!=m+1&&X!=m+2&&X!=m+3))
    X=X+X-x;               //else move straight as A(n+1)=A(n)+A(n)-A(n-1) where A's in arithmetic progression


    if(Y==0) {Y++;
                      if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}
    }               //if ball is at above wall rebound
    else if((Y==6)&&(X==m))
            {
                      if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}
                Y=y;
                X++;
            }
    else if((Y==6)&&(X==m+3))
            {    
                      if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}
                Y=y;
                X--;
            }
    else if((Y==6)&&(X==m+1||X==m+2))
        {
                      if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}
        Y--;
        X=X+X-x;
        }
    else Y=Y+Y-y;               //else move straight

    x=xtemp;                    //transfer previous X to x
    y=ytemp;                    //transfer previous Y to y

      if(Y==7)
  {while(buzzer_count<10000)
    {
   digitalWrite(10,HIGH);
   buzzer_count++;}
    lif--;
            if(lif==2)    
        {
          digitalWrite(A1, LOW);
          digitalWrite(A2, HIGH);
          digitalWrite(A3, HIGH);
        }
        if(lif==1)    
        {
          digitalWrite(A1, LOW);
          digitalWrite(A2, LOW);
          digitalWrite(A3, HIGH);  
        }
        if(lif==0)  {  
          digitalWrite(A1, LOW);
          digitalWrite(A2, LOW);
          digitalWrite(A3, LOW); 
        }
        if(lif==0)  {    
         delay(1000);
         times=0;
         int pattern1[] = {  0,0,0,0,0,0,0,0,
                        0,0,1,1,1,1,0,0,
                        0,1,0,0,0,0,1,0,
                        1,0,0,0,0,0,0,1,
                        1,0,0,0,1,0,0,1,
                        0,1,0,0,1,1,1,0,
                        0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern1[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
   times=0;
    int pattern2[] = {  0,0,0,0,0,1,0,0,
                        0,0,0,1,1,0,0,0,
                        0,1,1,0,1,0,0,0,
                        1,0,0,0,1,0,0,0,
                        0,1,1,0,1,0,0,0,
                        0,0,0,1,1,0,0,0,
                        0,0,0,0,0,1,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern2[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
   times=0;
            int pattern3[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        1,1,1,1,1,1,0,0,
                        0,1,0,0,0,0,0,0,
                        0,0,1,0,0,0,0,0,
                        0,1,0,0,0,0,0,0,
                        1,1,1,1,1,1,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern3[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
      times=0;
            int pattern4[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        1,1,1,1,1,1,0,0,
                        1,0,1,0,0,1,0,0,
                        1,0,1,0,0,1,0,0,
                        1,0,0,0,0,1,0,0,
                        0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern4[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
      times=0;
            int pattern5[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        0,1,1,1,1,0,0,0,
                        1,0,0,0,0,1,0,0,
                        1,0,0,0,0,1,0,0,
                        1,0,0,0,0,1,0,0,
                        0,1,1,1,1,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<50) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern5[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
      times=0;
            int pattern6[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        1,1,0,0,0,0,0,0,
                        0,0,1,1,1,0,0,0,
                        0,0,0,0,0,1,0,0,
                        0,0,1,1,1,0,0,0,
                        1,1,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern6[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
      times=0;
            int pattern7[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        1,1,1,1,1,1,0,0,
                        1,0,1,0,0,1,0,0,
                        1,0,1,0,0,1,0,0,
                        1,0,0,0,0,1,0,0,
                        0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern7[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}
      times=0;
            int pattern8[] = {  0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,
                        1,1,1,1,1,1,0,0,
                        1,0,1,1,0,0,0,0,
                        1,0,1,0,1,0,0,0,
                        0,1,1,0,0,1,0,0,
                        0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0};
     while(times<30) {
       times++;
     for (j = 0; j<=7; j++){
       for(int i=1; i<=8; i++){
         if(pattern8[ct]==1){  
         pulse();  
         digitalWrite(row[j], 0);
         delay(2);
         digitalWrite(row[j], 1);
         }
         else{
           pulse();
         }
         ct++;
     }
   }
   ct=0;}      
             lif=3;
      for(i=0;i<=31;i++)
  {
    ar[c[i]][d[i]]=2;
  }
   digitalWrite(A1, HIGH);  
   digitalWrite(A2, HIGH);  
   digitalWrite(A3, HIGH);  
    
        }
    Y=4;
    X=7;
    y=3;
    x=6;
  }

    
    for(i=0;i<=31;i++)
    {
    if(Y==c[i]&&X==d[i])
    {
      count++;
    }
    }
    if(count>0&&ar[Y][X]==2)
    {                            //if any coordinate matches the brick, then before printing
        for(i=0;i<=31;i++)       //comparison of each brick
        {
            if(Y==c[i]&&X==d[i])//if victim brick was c[i]th,d[i]th
           {
            
            if(c[i]==0&&(d[i]==0||d[i]==7))
            lif++;
                             if(buzzer_count<1000){
   digitalWrite(10,HIGH);
   buzzer_count++;}

            ar[Y][X]=0;         //erase it
           }
        }
        bricktemp=y;            //replace x and X
        y=Y;                    //tried trial and error
        Y=bricktemp;
    }

}
void slider()
{
 static int pot_value;
 pot_value=analogRead(A0);
     pot_value=map(pot_value, 0, 1023, 0, 5);
     if(digitalRead(11)==LOW){
  if(pot_value<1)  
    m=0;
  else if(pot_value>=1 && pot_value<2)
    m=1;
  else if(pot_value>=2 && pot_value<3)
    m=2; 
  else if(pot_value>=3 && pot_value<4)
    m=3;  
  else if(pot_value>=4)
    m=4;     }
}